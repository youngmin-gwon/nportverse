{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 iResolution;\nuniform float iTime;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec3 FLT_flutter_local_ray_dir(float fov, vec2 size, vec2 pos)\n{\n    vec2 xy = pos - (size * 0.5);\n    float cot_half_fov = tan(radians(90.0 - (fov * 0.5)));\n    float z = (size.y * 0.5) * cot_half_fov;\n    return normalize(vec3(xy, -z));\n}\n\nmat3 FLT_flutter_local_rot3xy(vec2 angle)\n{\n    vec2 c = cos(angle);\n    vec2 s = sin(angle);\n    return mat3(vec3(c.y, 0.0, -s.y), vec3(s.y * s.x, c.x, c.y * s.x), vec3(s.y * c.x, -s.x, c.y * c.x));\n}\n\nvec2 FLT_flutter_local_ray_vs_sphere(vec3 p, vec3 dir, float r)\n{\n    float b = dot(p, dir);\n    float c = dot(p, p) - (r * r);\n    float d = (b * b) - c;\n    if (d < 0.0)\n    {\n        return vec2(10000.0, -10000.0);\n    }\n    d = sqrt(d);\n    return vec2((-b) - d, (-b) + d);\n}\n\nfloat FLT_flutter_local_density(vec3 p, float ph)\n{\n    return exp((-max(length(p) - 1.0, 0.0)) / ph);\n}\n\nfloat FLT_flutter_local_optic(vec3 p, vec3 q, float ph)\n{\n    vec3 s = (q - p) / vec3(8.0);\n    vec3 v = p + (s * 0.5);\n    float sum = 0.0;\n    for (int i = 0; i < 8; i++)\n    {\n        vec3 param = v;\n        float param_1 = ph;\n        sum += FLT_flutter_local_density(param, param_1);\n        v += s;\n    }\n    sum *= length(s);\n    return sum;\n}\n\nfloat FLT_flutter_local_phase_ray(float cc)\n{\n    return 0.0596831031143665313720703125 * (1.0 + cc);\n}\n\nfloat FLT_flutter_local_phase_mie(float g, float c, float cc)\n{\n    float gg = g * g;\n    float a = (1.0 - gg) * (1.0 + cc);\n    float b = (1.0 + gg) - ((2.0 * g) * c);\n    b *= sqrt(b);\n    b *= (2.0 + gg);\n    return (0.119366206228733062744140625 * a) / b;\n}\n\nvec3 FLT_flutter_local_in_scatter(vec3 o, vec3 dir, vec2 e, vec3 l)\n{\n    vec3 sum_ray = vec3(0.0);\n    vec3 sum_mie = vec3(0.0);\n    float n_ray0 = 0.0;\n    float n_mie0 = 0.0;\n    float len = (e.y - e.x) / 80.0;\n    vec3 s = dir * len;\n    vec3 v = o + (dir * (e.x + (len * 0.5)));\n    for (int i = 0; i < 80; i++)\n    {\n        vec3 param = v;\n        float param_1 = 0.0500000007450580596923828125;\n        float d_ray = FLT_flutter_local_density(param, param_1) * len;\n        vec3 param_2 = v;\n        float param_3 = 0.0199999995529651641845703125;\n        float d_mie = FLT_flutter_local_density(param_2, param_3) * len;\n        n_ray0 += d_ray;\n        n_mie0 += d_mie;\n        vec3 param_4 = v;\n        vec3 param_5 = l;\n        float param_6 = 1.5;\n        vec2 f = FLT_flutter_local_ray_vs_sphere(param_4, param_5, param_6);\n        vec3 u = v + (l * f.y);\n        vec3 param_7 = v;\n        vec3 param_8 = u;\n        float param_9 = 0.0500000007450580596923828125;\n        float n_ray1 = FLT_flutter_local_optic(param_7, param_8, param_9);\n        vec3 param_10 = v;\n        vec3 param_11 = u;\n        float param_12 = 0.0199999995529651641845703125;\n        float n_mie1 = FLT_flutter_local_optic(param_10, param_11, param_12);\n        vec3 att = exp((vec3(3.7999999523162841796875, 13.5, 33.09999847412109375) * (-(n_ray0 + n_ray1))) - ((vec3(21.0) * (n_mie0 + n_mie1)) * 1.10000002384185791015625));\n        sum_ray += (att * d_ray);\n        sum_mie += (att * d_mie);\n        v += s;\n    }\n    float c = dot(dir, -l);\n    float cc = c * c;\n    float param_13 = cc;\n    float param_14 = -0.7799999713897705078125;\n    float param_15 = c;\n    float param_16 = cc;\n    vec3 scatter = ((sum_ray * vec3(3.7999999523162841796875, 13.5, 33.09999847412109375)) * FLT_flutter_local_phase_ray(param_13)) + ((sum_mie * vec3(21.0)) * FLT_flutter_local_phase_mie(param_14, param_15, param_16));\n    return scatter * 10.0;\n}\n\nvoid FLT_main()\n{\n    float param_17 = 60.0;\n    vec2 param_18 = iResolution;\n    vec2 param_19 = FLT_flutter_local_FlutterFragCoord();\n    vec3 dir_1 = FLT_flutter_local_ray_dir(param_17, param_18, param_19);\n    vec3 eye = vec3(0.0, 0.0, 3.0);\n    vec2 param_20 = vec2(2.7999999523162841796875, iTime * 2.7999999523162841796875);\n    mat3 rot = FLT_flutter_local_rot3xy(param_20);\n    dir_1 = rot * dir_1;\n    eye = rot * eye;\n    vec3 l_1 = vec3(0.0, 0.0, 1.0);\n    vec3 param_21 = eye;\n    vec3 param_22 = dir_1;\n    float param_23 = 1.5;\n    vec2 e_1 = FLT_flutter_local_ray_vs_sphere(param_21, param_22, param_23);\n    if (e_1.x > e_1.y)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    vec3 param_24 = eye;\n    vec3 param_25 = dir_1;\n    float param_26 = 1.0;\n    vec2 f_1 = FLT_flutter_local_ray_vs_sphere(param_24, param_25, param_26);\n    e_1.y = min(e_1.y, f_1.x);\n    vec3 param_27 = eye;\n    vec3 param_28 = dir_1;\n    vec2 param_29 = e_1;\n    vec3 param_30 = l_1;\n    vec3 I = FLT_flutter_local_in_scatter(param_27, param_28, param_29, param_30);\n    fragColor = vec4(pow(I, vec3(0.4545454680919647216796875)), 1.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
  "stage": 1,
  "target_platform": 2,
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "iResolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "iTime",
      "rows": 1,
      "type": 10
    }
  ]
}