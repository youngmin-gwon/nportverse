{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 iResolution;\nuniform float iTime;\n\nvec4 fragColor;\n\nfloat time;\n\nmat3 FLT_flutter_local_calcLookAtMatrix(vec3 ro, vec3 ta, vec3 up)\n{\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, up));\n    vec3 vv = normalize(cross(uu, ww));\n    return mat3(vec3(uu), vec3(vv), vec3(ww));\n}\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec4 FLT_flutter_local_inverseStereographic(vec3 p, inout float k)\n{\n    k = 2.0 / (1.0 + dot(p, p));\n    return vec4(p * k, k - 1.0);\n}\n\nvoid FLT_flutter_local_pR(inout vec2 p, float a)\n{\n    p = (p * cos(a)) + (vec2(p.y, -p.x) * sin(a));\n}\n\nfloat FLT_flutter_local_fTorus(vec4 p4)\n{\n    float d1 = (length(p4.xy) / length(p4.zw)) - 1.0;\n    float d2 = (length(p4.zw) / length(p4.xy)) - 1.0;\n    float _181;\n    if (d1 < 0.0)\n    {\n        _181 = -d1;\n    }\n    else\n    {\n        _181 = d2;\n    }\n    float d = _181;\n    d /= 3.1415927410125732421875;\n    return d;\n}\n\nfloat FLT_flutter_local_fixDistance(inout float d, float k)\n{\n    float sn = sign(d);\n    d = abs(d);\n    d = (d / k) * 1.82000005245208740234375;\n    d += 1.0;\n    d = pow(d, 0.5);\n    d -= 1.0;\n    d *= 1.66666662693023681640625;\n    d *= sn;\n    return d;\n}\n\nfloat FLT_flutter_local_smax(float a, float b, float r)\n{\n    vec2 u = max(vec2(r + a, r + b), vec2(0.0));\n    return min(-r, max(a, b)) + length(u);\n}\n\nfloat FLT_flutter_local_map(vec3 p)\n{\n    vec3 param = p;\n    float param_1;\n    vec4 _225 = FLT_flutter_local_inverseStereographic(param, param_1);\n    float k = param_1;\n    vec4 p4 = _225;\n    vec2 param_2 = p4.zy;\n    float param_3 = (time * (-3.1415927410125732421875)) / 2.0;\n    FLT_flutter_local_pR(param_2, param_3);\n    p4.z = param_2.x;\n    p4.y = param_2.y;\n    vec2 param_4 = p4.xw;\n    float param_5 = (time * (-3.1415927410125732421875)) / 2.0;\n    FLT_flutter_local_pR(param_4, param_5);\n    p4.x = param_4.x;\n    p4.w = param_4.y;\n    vec4 param_6 = p4;\n    float d = FLT_flutter_local_fTorus(param_6);\n    d = abs(d);\n    d -= 0.20000000298023223876953125;\n    float param_7 = d;\n    float param_8 = k;\n    float _271 = FLT_flutter_local_fixDistance(param_7, param_8);\n    d = _271;\n    float param_9 = d;\n    float param_10 = length(p) - 1.85000002384185791015625;\n    float param_11 = 0.20000000298023223876953125;\n    d = FLT_flutter_local_smax(param_9, param_10, param_11);\n    return d;\n}\n\nvec3 FLT_flutter_local_pal(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + (b * cos(((c * t) + d) * 6.28318023681640625));\n}\n\nvec3 FLT_flutter_local_spectrum(float n)\n{\n    float param = n;\n    vec3 param_1 = vec3(0.5);\n    vec3 param_2 = vec3(0.5);\n    vec3 param_3 = vec3(1.0);\n    vec3 param_4 = vec3(0.0, 0.3300000131130218505859375, 0.670000016689300537109375);\n    return FLT_flutter_local_pal(param, param_1, param_2, param_3, param_4);\n}\n\nvoid FLT_main()\n{\n    time = mod(iTime / 2.0, 1.0);\n    vec3 camPos = vec3(3.150000095367431640625, 9.625, -9.625);\n    vec3 camTar = vec3(0.0);\n    vec3 camUp = vec3(-1.0, 0.0, -1.5);\n    vec3 param_5 = camPos;\n    vec3 param_6 = camTar;\n    vec3 param_7 = camUp;\n    mat3 camMat = FLT_flutter_local_calcLookAtMatrix(param_5, param_6, param_7);\n    float focalLength = 5.0;\n    vec2 p = ((-iResolution) + (FLT_flutter_local_FlutterFragCoord() * 2.0)) / vec2(iResolution.y);\n    vec3 rayDirection = normalize(camMat * vec3(p, focalLength));\n    vec3 rayPosition = camPos;\n    float rayLength = 0.0;\n    float distance = 0.0;\n    vec3 color = vec3(0.0);\n    for (float i = 0.0; i < 82.0; i += 1.0)\n    {\n        rayLength += max(0.001000000047497451305389404296875, abs(distance) * 0.800000011920928955078125);\n        rayPosition = camPos + (rayDirection * rayLength);\n        vec3 param_8 = rayPosition;\n        distance = FLT_flutter_local_map(param_8);\n        vec3 c = vec3(max(0.0, 0.00999999977648258209228515625 - abs(distance)) * 0.5);\n        c *= vec3(1.39999997615814208984375, 2.099999904632568359375, 1.7000000476837158203125);\n        c *= smoothstep(20.0, 7.0, length(rayPosition));\n        float rl = smoothstep(20.0, 0.100000001490116119384765625, rayLength);\n        c *= rl;\n        float param_9 = (rl * 6.0) - 0.60000002384185791015625;\n        c *= FLT_flutter_local_spectrum(param_9);\n        color += c;\n        if (rayLength > 20.0)\n        {\n            break;\n        }\n    }\n    color = pow(color, vec3(0.5555555820465087890625)) * 2.0;\n    color = pow(color, vec3(2.0)) * 3.0;\n    color = pow(color, vec3(0.4545454680919647216796875));\n    fragColor = vec4(color, 1.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
  "stage": 1,
  "target_platform": 2,
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "iResolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "iTime",
      "rows": 1,
      "type": 10
    }
  ]
}